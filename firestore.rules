rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Rule for the 'users' collection
     match /users/{userId} {g
      allow read, update: if request.auth != null && request.auth.uid == userId;

      // Allow a user to be created IF the person making the request
      // has a corresponding document in the 'business_info' collection.
      allow create: if request.auth != null &&
                      exists(/databases/$(database)/documents/business_info/$(request.auth.uid));
    }

    // FIX: This is the crucial change.
    // This rule allows a new user to create their own business_info document
    // as long as the document's ID matches their new user ID.
    match /business_info/{userId} {
      allow create: if request.auth != null && request.auth.uid == userId;
      
      // You can also add rules for reading and updating later
      allow read, update: if request.auth != null && request.auth.uid == userId;
    }
    // Rule for the 'itemGroups' collection
    match /itemGroups/{itemGroupId} {
      allow read, write: if request.auth != null;
    }

    // Rule for the 'items' collection
    match /items/{itemId} {
      allow read, write: if request.auth != null;
    }

    // IMPORTANT: Remove or comment out your old /sales/{saleId} rule
    // if your sales are ONLY stored under the user's artifacts path.
    match /sales/{saleId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null ;
    }

    // NEW/UPDATED Rule: This rule grants read/write access to all collections
    // (like 'sales' and 'salesReturns') and documents nested under
    // 'artifacts/{appId}/users/{userId}/' for the authenticated user.
    match /artifacts/{appId}/users/{userId}/{collectionId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
     match /purchases/{purchaseId} {
  // Allow a user to read ONLY the documents where their UID matches the userId field in the document.
  allow read: if request.auth != null && request.auth.uid == resource.data.userId;

  // Allow a user to create a new document, but check that the userId field in the new document
  // is correctly set to their own UID.
  allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

  // You can add update and delete rules for ownership checks as well.
  allow update, delete: if request.auth != null && request.auth.uid == resource.data.userId;
}
  }
}